data_1[1,]
my.mat <- matrix(seq(1, 16), nrow = 4, ncol = 4)
my.mat
my.mat[1, ] <- my.mat[1,] + rep(c(0,3),each=2)
my.mat[1, ]
barplot(data)
hh <- hclust(dist(data))
hh
names(hh)
set.seed(678910)
old_par <- par()
for(i in 1:40){
# flip a coin
coinFlip <- rbinom(1,size=1,prob=0.5)
# if coin is heads add a common pattern to that row
if(coinFlip){
data[i,] <- data[i,] + rep(c(0,3),each=5)
}
}
data
# hierarchical clustering
hh <- hclust(dist(data))
hh <- hclust(dist(data))
dataOrdered <- data[hh$order,]
par(mfrow=c(1,3))
# heat map (sorted)
image(t(dataOrdered)[,nrow(dataOrdered):1])
}
par(mar = rep(.2, 4))
image(1:10, 1:40, t(data)[ , nrow(data):1])
}
par(mar = rep(.2, 4))
image(1:10, 1:40, t(data)[ , nrow(data):1])
par(mar = rep(2, 4))
image(1:10, 1:40, t(data)[ , nrow(data):1])
heatmap(data)
?rowMeans
hh <- hclust(dist(data))
hh <- hclust(dist(data))
dataOrdered <- data[hh$order,]
# create 1 x 3 panel plot
par(mfrow=c(1,3))
# heat map (sorted)
image(t(dataOrdered)[,nrow(dataOrdered):1])
# row means (40 rows)
plot(rowMeans(dataOrdered),40:1,,xlab="Row Mean",ylab="Row",pch=19)
# column means (10 columns)
plot(colMeans(dataOrdered),xlab="Column",ylab="Column Mean",pch=19)
set.seed(678910)
old_par <- par()
for(i in 1:40){
# flip a coin
coinFlip <- rbinom(1,size=1,prob=0.5)
# if coin is heads add a common pattern to that row
if(coinFlip){
data[i,] <- data[i,] + rep(c(0,3),each=5)
}
}
hh <- hclust(dist(data))
hh <- hclust(dist(data))
dataOrdered <- data[hh$order,]
# create 1 x 3 panel plot
par(mfrow=c(1,3))
# heat map (sorted)
image(t(dataOrdered)[,nrow(dataOrdered):1])
# row means (40 rows)
plot(rowMeans(dataOrdered),40:1,,xlab="Row Mean",ylab="Row",pch=19)
# column means (10 columns)
plot(colMeans(dataOrdered),xlab="Column",ylab="Column Mean",pch=19)
set.seed(678910)
old_par <- par()
for(i in 1:40){
# flip a coin
coinFlip <- rbinom(1,size=1,prob=0.5)
# if coin is heads add a common pattern to that row
if(coinFlip){
data[i,] <- data[i,] + rep(c(0,3),each=5)
}
}
par(mar = rep(2, 4))
image(1:10, 1:40, t(data)[ , nrow(data):1])
heatmap(data)
hh <- hclust(dist(data))
hh <- hclust(dist(data))
dataOrdered <- data[hh$order,]
# create 1 x 3 panel plot
par(mfrow=c(1,3))
# heat map (sorted)
image(t(dataOrdered)[,nrow(dataOrdered):1])
# row means (40 rows)
plot(rowMeans(dataOrdered),40:1,,xlab="Row Mean",ylab="Row",pch=19)
# column means (10 columns)
plot(colMeans(dataOrdered),xlab="Column",ylab="Column Mean",pch=19)
dataOrdered
plot(rowMeans(dataOrdered),40:1,,xlab="Row Mean",ylab="Row",pch=19)
plot(rowMeans(dataOrdered),40:1,,xlab="Row Mean",ylab="Row",pch=19)
plot(rowMeans(dataOrdered),40:1,,xlab="Row Mean",ylab="Row",pch=19)
plot(colMeans(dataOrdered),xlab="Column",ylab="Column Mean",pch=19)
image(t(dataOrdered)[,nrow(dataOrdered):1])
# row means (40 rows)
plot(rowMeans(dataOrdered),40:1,,xlab="Row Mean",ylab="Row",pch=19)
# column means (10 columns)
plot(colMeans(dataOrdered),xlab="Column",ylab="Column Mean",pch=19)
plot(colMeans(dataOrdered),xlab="Column",ylab="Column Mean",pch=19)
plot(colMeans(dataOrdered),xlab="Column",ylab="Column Mean",pch=19)
image(t(dataOrdered)[,nrow(dataOrdered):1])
# row means (40 rows)
plot(rowMeans(dataOrdered),40:1,,xlab="Row Mean",ylab="Row",pch=19)
# column means (10 columns)
plot(colMeans(dataOrdered),xlab="Column",ylab="Column Mean",pch=19)
library("xlsx", lib.loc="D:/INSTALL/R-3.2.2/library")
library("XML", lib.loc="D:/INSTALL/R-3.2.2/library")
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
rootNode[[1]]
xmlSApply(rootNode, xmlValue)
foodNames <- xpathSApply(rootNode,"//name", xmlValue)
foodNames
fileUrl_1 <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl_1, useInternalNodes = TRUE)
scores <- xpathSApply(doc, "//li[@class = "score"]", xmlValue)
scores
names <- xpathSApply(doc, "//li[@class = "name"]", xmlValue)
names
scores <- xpathSApply(doc, "//li[@class = "score"]", xmlValue)
names <- xpathSApply(doc, "//li[@class = 'name']", xmlValue)
names
scores <- xpathSApply(doc, "//li[@class = 'score']", xmlValue)
scores
names <- xpathSApply(doc, "//div[@class = 'scores-carousel']", xmlValue)
names
names <- xpathSApply(doc, "//div[@class = 'item-info-wrap']", xmlValue)
names
library("jsonlite", lib.loc="D:/INSTALL/R-3.2.2/library")
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
jsonData$name
myjson <- toJSON(iris, pretty = TRUE)
cat(myjson)
?cat
iris2 <- fromJSON(myjson)
head(iris2)
for(i in 1:40){
# flip a coin
coinFlip <- rbinom(1,size=1,prob=0.5)
# if coin is heads add a common pattern to that row
if(coinFlip){
data[i,] <- data[i,] + rep(c(0,3),each=5)
}
}
for(i in 1:40){
# flip a coin
coinFlip <- rbinom(1,size=1,prob=0.5)
# if coin is heads add a common pattern to that row
if(coinFlip){
data[i,] <- data[i,] + rep(c(0,3),each=5)
}
}
for(i in 1:40){
# flip a coin
coinFlip <- rbinom(1,size=1,prob=0.5)
# if coin is heads add a common pattern to that row
if(coinFlip){
data[i,] <- data[i,] + rep(c(0,3),each=5)
}
}
df <- data.frame(
name=c('Маша','Даша','Саша','Таша'),
ceh1=c(2,6,8,3),
ceh2=c(3,5,1, 5),
ceh3=c(7,4,12, 6)
)
df
df <- data.frame(
name=c('M','D','S','T'),
ceh1=c(2,6,8,3),
ceh2=c(3,5,1, 5),
ceh3=c(7,4,12, 6)
)
df
library("reshape2", lib.loc="D:/INSTALL/R-3.2.2/library")
df1 <- melt(df, id='name')
df1
df2 <- dcast(df1, name~variable)
df2
set.seed(12345)
data <- matrix(rnorm(400), nrow = 40)
heatmap(data)
set.seed(12345)
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
?rbinom
?exp
exp(3)
log(exp(3))
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
set.seed(678910)
old_par <- par()
for(i in 1:40){
# flip a coin
coinFlip <- rbinom(1,size=1,prob=0.5)
# if coin is heads add a common pattern to that row
if(coinFlip){
data[i,] <- data[i,] + rep(c(0,3),each=5)
}
}
par(mar = rep(2, 4))
image(1:10, 1:40, t(data)[ , nrow(data):1])
data
data
coinFlip
coinFlip
coinFlip
coinFlip
coinFlip
coinFlip
coinFlip
coinFlip
heatmap(data)
coinFlip
coinFlip
coinFlip
hh <- hclust(dist(data))
dataOrdered <- data[hh$order,]
par(mfrow=c(1,3))
image(t(dataOrdered)[,nrow(dataOrdered):1])
plot(rowMeans(dataOrdered),40:1,,xlab="Row Mean",ylab="Row",pch=19)
# column means (10 columns)
plot(colMeans(dataOrdered),xlab="Column",ylab="Column Mean",pch=19)
svd1 <- svd(scale(dataOrdered))
# create 1 by 3 panel plot
par(mfrow=c(1,3))
# data heatmap (sorted)
image(t(dataOrdered)[,nrow(dataOrdered):1])
# U Matrix - first column
plot(svd1$u[,1],40:1,,xlab="Row",ylab="First left singular vector",pch=19)
# V vector - first column
plot(svd1$v[,1],xlab="Column",ylab="First right singular vector",pch=19)
scale(dataOrdered)
hh
ploy(hh)
plot(hh)
svd1
library("RMySQL", lib.loc="D:/INSTALL/R-3.2.2/library")
ucscDb <- dbConnect(MySQL(), user = "genome",
host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;");
dbDisconnect(ucscDb);
head(result)
class(hg19["affyU133Plus2"])
hg19 <- dbConnect(MySQL(), user = "genome", db = "hg19",
host = "genome-mysql.cse.ucsc.edu")
class(hg19["affyU133Plus2"])
class(hg19$affyU133Plus2)
dbDisconnect(hg19)
query <- dbSendQuery(hg19, "select* from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query, n = 5);
hg19 <- dbConnect(MySQL(), user = "genome", db = "hg19",
host = "genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select* from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query, n = 5);
affyMis
dbClearResult(query)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
created = h5createFile("example.h5")
created
created = h5createFile("example.h5")
created <- h5createFile("example.h5")
library(rhdf5)
created <- h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
con <- url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode <- readLines(con)
close(con)
htmlCode
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = TRUE)
library("XML", lib.loc="D:/INSTALL/R-3.2.2/library")
html <- htmlTreeParse(url, useInternalNodes = TRUE)
xpathSApply(html, "//title", xmlValue)
library(httr)
html2 <- GET(url)
content2 <- content(html2, as = "text")
parsedHtml <- htmlParse(content2, asText = TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
library("httr", lib.loc="D:/INSTALL/R-3.2.2/library")
install.packages("httr")
library(httr)
install.packages("stringi")
library(httr)
html2 <- GET(url)
content2 <- content(html2, as = "text")
parsedHtml <- htmlParse(content2, asText = TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
install.packages("kernlab")
library("kernlab", lib.loc="D:/INSTALL/R-3.2.2/library")
?rbinom
data(spam)
dim(spam)
set.seed(3435)
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam <- spam[trainIndicator == 1, ]
testSpam <- spam[trainIndicator == 0, ]
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(trainSpam$capitalAve, trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(trainSpam[ , 1:4])
plot(log10(trainSpam[ , 1:4] + 1))
plot(log10(trainSpam[ , 1] + 1))
plot(trainSpam[ , 1])
plot(trainSpam[ , 1:2])
plot(trainSpam[ , 1:3])
hCluster <- hclust(dist(trainSpam[ , 1:57]))
plot(hCluster)
library(kernlab)
data(spam)
trainSpam <- spam[trainIndicator == 1, ]
testSpam <- spam[trainIndicator == 0, ]
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
set.seed(3435)
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam <- spam[trainIndicator == 1, ]
testSpam <- spam[trainIndicator == 0, ]
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[ , 1:4] + 1))
hCluster <- hclust(dist(trainSpam[ , 1:57]))
plot(hCluster)
hCluster <- hclust(dist(t(trainSpam[ , 1:57]))
plot(hCluster)
hCluster <- hclust(dist(t(trainSpam[ , 1:57])))
plot(hCluster)
hClusterUpdated <- hclust(dist(t(log10(trainSpam[ , 1:55] + 1))))
plot(hClusterUpdated)
class(trainSpam$type)
levels(trainSpam$type)
library("dplyr", lib.loc="D:/INSTALL/R-3.2.2/library")
library("dplyr", lib.loc="D:/INSTALL/R-3.2.2/library")
install.packages("rstudioapi")
library("dplyr", lib.loc="D:/INSTALL/R-3.2.2/library")
detach("package:dplyr", unload=TRUE)
install.packages("dplyr")
library("dplyr", lib.loc="D:/INSTALL/R-3.2.2/library")
library(kernlab)
data(spam)
dim(spam)
set.seed(3435)
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam <- spam[trainIndicator == 1, ]
testSpam <- spam[trainIndicator == 0, ]
head(trainSpam)
table(trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[ , 1:4] + 1))
hCluster <- hclust(dist(t(trainSpam[ , 1:57])))
plot(hCluster)
hClusterUpdated <- hclust(dist(t(log10(trainSpam[ , 1:55] + 1))))
plot(hClusterUpdated)
class(trainSpam$type)
glimpse(trainSpam)
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam <- spam[trainIndicator == 1, ]
testSpam <- spam[trainIndicator == 0, ]
head(trainSpam)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[ , 1:4] + 1))
hCluster <- hclust(dist(t(trainSpam[ , 1:57])))
plot(hCluster)
hClusterUpdated <- hclust(dist(t(log10(trainSpam[ , 1:55] + 1))))
plot(hClusterUpdated)
?scale
setwd("D:/Coursera/RepRes/RepData_PeerAssessment1")
unzip("activity.zip")
data <- read.csv("activity.csv")
# remove file activity.csv after reading the data
file.remove("activity.csv")
library(dplyr)
# library(tidyr)
library(ggplot2)
library(scales)
glimpse(data)
# Transform the data into a format suitable for my analysis
data$date <- as.Date(data$date)
data$interval <- sprintf("%04d", data$interval)
data$interval <- format(strptime(data$interval, format = "%H%M"),
format = "%H:%M")
## What is mean total number of steps taken per day?
# 1. Calculate the total number of steps taken per day
q1 <- data %>%
group_by(date) %>%
summarise(totalSteps = sum(steps))
# 2. Make a histogram of the total number of steps taken each day
ggplot(q1, aes(x = totalSteps)) +
geom_histogram(binwidth = 1500, aes(fill = ..count..)) +
scale_fill_continuous(name = "Frequency") +
ggtitle("Total number of steps per day") +
xlab("Total number of steps") +
ylab("Frequency") +
theme(plot.title = element_text(size = 20))
# 3. Calculate and report the mean and median of the total number of steps
# taken per day
q1_3 <- q1 %>% summarise(meanSteps = mean(totalSteps, na.rm = TRUE),
medianSteps = median(totalSteps, na.rm = TRUE))
print(q1_3)
## What is the average daily activity pattern?
# 1. Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
# and the average number of steps taken, averaged across all days (y-axis)
q2 <- data %>%
group_by(interval) %>%
summarise(avgTotalNSteps = mean(steps, na.rm = TRUE))
q2$interval <- as.POSIXct(q2$interval, format = "%H:%M")
ggplot(q2, aes(x = interval, y = avgTotalNSteps)) +
geom_line(lwd = 1, color = "blue") +
scale_x_datetime(labels = date_format("%H:%M")) +
xlab("Time") +
ylab("Average number of steps") +
ggtitle("Average number of steps during the day") +
theme(plot.title = element_text(size = 20))
# 2. Which 5-minute interval, on average across all the days in the dataset,
# contains the maximum number of steps?
q2 %>% filter(avgTotalNSteps == max(avgTotalNSteps))
## Imputing missing values
# 1. Calculate and report the total number of missing values in the dataset
# (i.e. the total number of rows with NAs)
sum(is.na(data))
sum(is.na(data$steps))
# 2. Devise a strategy for filling in all of the missing values in the dataset.
# I've used the mean for that 5-minute interval
repData <- data %>%
group_by(interval) %>%
summarise(avgTotalNSteps = round(mean(steps, na.rm = TRUE)))
# 3. Create a new dataset that is equal to the original dataset but with
# the missing data filled in.
dataImp <- data
dataImp$steps_imp <- dataImp$steps
imp <- is.na(dataImp$steps_imp)
ints <- dataImp$interval[imp]
dataImp$steps_imp[imp] <- repData$avgTotalNSteps[repData$interval %in% ints]
dataImputed <- dataImp %>% select("steps" = steps_imp, date, interval)
# 4. Make a histogram of the total number of steps taken each day. Calculate
# and report the mean and median total number of steps taken per day. Do these
# values differ from the estimates from the first part of the assignment? What
# is the impact of imputing missing data on the estimates of the total daily
# number of steps?
q4 <- dataImputed %>%
group_by(date) %>%
summarise(totalStepsImp = sum(steps))
ggplot(q4, aes(x = totalStepsImp)) +
geom_histogram(binwidth = 1500, aes(fill = ..count..)) +
scale_fill_continuous(name = "Frequency") +
ggtitle("Total number of steps per day") +
xlab("Total number of steps") +
ylab("Frequency") +
theme(plot.title = element_text(size = 20))
q4_val <- q4 %>% summarise(meanStepsImp = mean(totalStepsImp, na.rm = TRUE),
medianStepsImp = median(totalStepsImp, na.rm = TRUE))
print(q4_val)
## Are there differences in activity patterns between weekdays and weekends?
## Use the dataset with the filled-in missing values for this part.
# 1. Create a new factor variable in the dataset with two levels – “weekday”
# and “weekend” indicating whether a given date is a weekday or weekend day.
dataImputed$weekday <- weekdays(dataImputed$date)
dataImputed$weekday <- ifelse(dataImputed$weekday %in% c("Saturday","Sunday"),
"Weekend", "Weekday")
dataImputed$weekday <- as.factor(dataImputed$weekday)
# 2. Make a panel plot containing a time series plot (i.e. type = "l") of the
# 5-minute interval (x-axis) and the average number of steps taken,
# averaged across all weekday days or weekend days (y-axis).
dataCompare <- dataImputed %>%
group_by(interval, weekday) %>%
summarise(avgSteps = mean(steps))
dataCompare$interval <- as.POSIXct(dataCompare$interval, format = "%H:%M")
ggplot(dataCompare, aes(x = interval, y = avgSteps)) +
facet_wrap(~ weekday, ncol = 1) +
geom_line(lwd = 1, color = "blue") +
scale_x_datetime(labels = date_format("%H:%M")) +
xlab("Time") +
ylab("Average number of steps") +
ggtitle("Average number of steps during the day\n (weekdays vs weekends)") +
theme(plot.title = element_text(size = 20),
strip.text = element_text(size = 14),
strip.background = element_rect(colour ="darkgrey", fill = "#FFFFCC"))
dataCompare$interval <- as.POSIXct(dataCompare$interval, format = "%H:%M",
tz = "BY")
?timezone
Sys.timezone()
Sys.time()
